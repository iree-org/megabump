#!/usr/bin/env python
# Copyright 2023 The IREE Authors
#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

from typing import List, Tuple

import argparse
from datetime import date
import subprocess
import sys
import textwrap

import megabump_utils as mb

LLVM_REPO_DIR = mb.llvm_submodule_path
IREE_REPO_DIR = mb.iree_path

TRACK_PATHS = ("mlir", "utils/bazel")


class CurrentState:
    """Current state of the llvm-project integrate."""

    def __init__(self, args):
        self.args = args
        self.current_commit, self.current_summary = mb.git_current_commit(
            repo_dir=LLVM_REPO_DIR
        )
        # The common commit between the llvm-project submodule and upstream.
        self.merge_base_commit = mb.git_merge_base(
            self.current_commit, "upstream/main", repo_dir=LLVM_REPO_DIR
        )
        # Whether the current llvm-project commit is clean (True) or
        # carries patches (False).
        self.is_clean = self.merge_base_commit == self.current_commit
        # List of (commit, desc) tuples in reverse chronological order for
        # commits that upstream is ahead.
        self.new_commits = self.filter_commits(
            mb.git_log_range(
                refs=("upstream/main", f"^{self.merge_base_commit}"),
                paths=TRACK_PATHS,
                repo_dir=LLVM_REPO_DIR,
            )
        )

    def filter_commits(self, original: List[Tuple[str, str]]) -> List[Tuple[str, str]]:
        results = []
        for commit, desc in original:
            # Filter out some common noise commit descriptions.
            if "Apply clang-tidy fixes" in desc or "[Docs]" in desc:
                continue

            results.append((commit, desc))
        return results

    def find_next_commit(self) -> Tuple[str, str]:
        """Finds the next LLVM commit to advance to.

        Returns (commit, desc).
        """
        if self.args.advance_to:
            for commit, desc in self.new_commits:
                if commit == self.args.advance_to:
                    return commit, desc
            else:
                print(
                    f"WARNING: Commit is not in recommended requested range. You may want to return to {self.current_commit} if this isn't right."
                )
                return commit, mb.git_commit_summary(commit, repo_dir=LLVM_REPO_DIR)
        else:
            if not self.new_commits:
                raise ValueError(f"No new commits")
            else:
                return next(reversed(self.new_commits))

    def index_of_next_commit(self, needle_commit: str) -> int:
        for i, (new_commit, desc) in enumerate(reversed(self.new_commits)):
            if new_commit == needle_commit:
                return i
        return -1


def do_next(args):
    fetch(args)
    state = CurrentState(args)
    if not state.new_commits:
        print(f"Up to date! Not starting.")
        sys.exit(99)

    next_commit, next_desc = state.find_next_commit()
    index_commit = state.index_of_next_commit(next_commit)
    print(
        f"==> Advancing to next LLVM commit ({index_commit} "
        f"of {len(state.new_commits)}):"
    )
    print(f"  {next_commit}: {next_desc}")
    if state.is_clean:
        print("Resetting LLVM head (branch is clean)")
        mb.git_reset(next_commit, repo_dir=LLVM_REPO_DIR)
    else:
        print("Rebasing LLVM")
        mb.git_rebase(next_commit, remote="upstream", repo_dir=LLVM_REPO_DIR)
    mb.git_create_commit(
        message=(
            f"Advance LLVM to {next_commit}: {next_desc} "
            f"({index_commit} of {len(state.new_commits)})"
        ),
        add_all=True,
        repo_dir=mb.iree_path,
    )

    if not args.no_export:
        print("Exporting submodule state to remote fork")
        subprocess.check_call(
            [sys.executable, str(mb.scripts_path / "export_submodule_head")],
            cwd=mb.scripts_path,
        )


def do_range(args):
    logs = mb.git_log_range(
        refs=(f"{args.from_ref}^1..{args.to_ref}",), repo_dir=LLVM_REPO_DIR
    )
    for commit, desc in logs:
        print(f"{commit} : {desc}")


def do_status(args):
    fetch(args)
    state = CurrentState(args)
    print(f"==> llvm-project is currently at {state.current_summary}:")
    if state.is_clean:
        print(f"  : Current commit is clean (no patches)")
    else:
        merge_base_summary = mb.git_commit_summary(
            state.merge_base_commit, repo_dir=LLVM_REPO_DIR
        )
        print(
            f"  : Current commit has diverging patches with base {state.merge_base_commit} ({merge_base_summary})"
        )

    # Compute the different commits.
    print(
        f"==> {len(state.new_commits)} affecting commits between upstream head and current:"
    )
    for commit, desc in state.new_commits:
        print(f"  {commit}: {desc}")


def fetch(args):
    print("==> Fetching origin and upstream revisions...")
    setup_remotes(args)
    mb.git_fetch(repository="origin", repo_dir=IREE_REPO_DIR)
    mb.git_fetch(repository="origin", repo_dir=LLVM_REPO_DIR)
    mb.git_fetch(repository="upstream", repo_dir=LLVM_REPO_DIR)


def setup_remotes(args):
    # We need to know what the real upstream repo is.
    mb.git_setup_remote(
        "upstream", "https://github.com/llvm/llvm-project.git", repo_dir=LLVM_REPO_DIR
    )


def main(args):
    if args.sub_command == "next":
        do_next(args)
    elif args.sub_command == "range":
        do_range(args)
    elif args.sub_command == "status":
        do_status(args)
    else:
        raise ValueError(f"Unrecognized sub-command {args.sub_command}")


def parse_arguments(argv):
    parser = argparse.ArgumentParser(description="IREE LLVM Revision Management")
    subparsers = parser.add_subparsers(
        help="sub-command help", required=True, dest="sub_command"
    )
    next_parser = subparsers.add_parser("next")
    next_parser.add_argument(
        "--advance-to", default=None, nargs="?", help="Advance to the given LLVM commit"
    )
    next_parser.add_argument(
        "--no-export",
        default=False,
        action="store_true",
        help="Disable export of the submodule commit",
    )
    status_parser = subparsers.add_parser("status")
    range_parser = subparsers.add_parser("range")
    range_parser.add_argument("from_ref", help="Starting commit")
    range_parser.add_argument("to_ref", help="Ending commit")

    args = parser.parse_args(argv)
    return args


if __name__ == "__main__":
    main(parse_arguments(sys.argv[1:]))
